<?php
/**
 * V√≠ d·ª• s·ª≠ d·ª•ng Order API
 * 
 * File n√†y minh h·ªça c√°ch s·ª≠ d·ª•ng Order Module ƒë·ªÉ:
 * - T√¨m ki·∫øm ƒë∆°n h√†ng
 * - L·ªçc theo c√°c ti√™u ch√≠ kh√°c nhau
 * - Ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n h√†ng
 * - Qu·∫£n l√Ω cache
 */

require_once __DIR__ . '/../../vendor/autoload.php';

use Puleeno\NhanhVn\Client\NhanhVnClient;
use Puleeno\NhanhVn\Config\ClientConfig;
use Puleeno\NhanhVn\Services\Logger\MonologAdapter;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

// Kh·ªüi t·∫°o logger
$logger = new Logger('order-example');
$logger->pushHandler(new StreamHandler(__DIR__ . '/../../logs/order-example.log', Logger::DEBUG));

try {
    // Kh·ªüi t·∫°o c·∫•u h√¨nh
    $config = new ClientConfig([
        'appId' => 'your_app_id',
        'secretKey' => 'your_secret_key',
        'businessId' => 'your_business_id',
        'accessToken' => 'your_access_token',
        'environment' => 'production'
    ]);

    // Kh·ªüi t·∫°o client
    $client = NhanhVnClient::getInstance($config);
    $client->setLogger(new MonologAdapter($logger));

    echo "<h1>üìã Order API Examples</h1>\n";
    echo "<p>V√≠ d·ª• s·ª≠ d·ª•ng Order Module ƒë·ªÉ qu·∫£n l√Ω ƒë∆°n h√†ng t·ª´ Nhanh.vn</p>\n";

    // 1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (10 ng√†y g·∫ßn nh·∫•t)
    echo "<h2>1. L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (10 ng√†y g·∫ßn nh·∫•t)</h2>\n";
    try {
        $orders = $client->orders()->getAll();
        echo "<p>‚úÖ T·ªïng s·ªë ƒë∆°n h√†ng: " . $orders->getTotalRecords() . "</p>\n";
        echo "<p>üìÑ T·ªïng s·ªë trang: " . $orders->getTotalPages() . "</p>\n";
        echo "<p>üì¶ S·ªë ƒë∆°n h√†ng trang hi·ªán t·∫°i: " . $orders->getCurrentPageOrderCount() . "</p>\n";
        
        if ($orders->hasNextPage()) {
            echo "<p>‚û°Ô∏è C√≥ trang ti·∫øp theo: " . $orders->getNextPage() . "</p>\n";
        }
        
        if ($orders->hasPreviousPage()) {
            echo "<p>‚¨ÖÔ∏è C√≥ trang tr∆∞·ªõc: " . $orders->getPreviousPage() . "</p>\n";
        }
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 2. T√¨m ki·∫øm ƒë∆°n h√†ng theo ID
    echo "<h2>2. T√¨m ki·∫øm ƒë∆°n h√†ng theo ID</h2>\n";
    try {
        $orders = $client->orders()->searchById(12345);
        if ($orders->getTotalRecords() > 0) {
            echo "<p>‚úÖ T√¨m th·∫•y ƒë∆°n h√†ng ID: 12345</p>\n";
            $order = $orders->getOrderById(12345);
            if ($order) {
                echo "<p>üìã Th√¥ng tin ƒë∆°n h√†ng:</p>\n";
                echo "<ul>\n";
                echo "<li>ID: " . $order->getId() . "</li>\n";
                echo "<li>Kh√°ch h√†ng: " . $order->getCustomerName() . "</li>\n";
                echo "<li>S·ªë ƒëi·ªán tho·∫°i: " . $order->getCustomerMobile() . "</li>\n";
                echo "<li>T·ªïng ti·ªÅn: " . number_format($order->getCalcTotalMoney()) . " VNƒê</li>\n";
                echo "<li>Tr·∫°ng th√°i: " . $order->getStatusName() . "</li>\n";
                echo "<li>Lo·∫°i: " . $order->getType() . "</li>\n";
                echo "<li>K√™nh b√°n: " . $order->getSaleChannelName() . "</li>\n";
                echo "</ul>\n";
            }
        } else {
            echo "<p>‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ID: 12345</p>\n";
        }
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 3. T√¨m ki·∫øm ƒë∆°n h√†ng theo s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng
    echo "<h2>3. T√¨m ki·∫øm ƒë∆°n h√†ng theo s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng</h2>\n";
    try {
        $orders = $client->orders()->searchByCustomerMobile('0987654321');
        echo "<p>‚úÖ T√¨m th·∫•y " . $orders->getTotalRecords() . " ƒë∆°n h√†ng cho s·ªë ƒëi·ªán tho·∫°i: 0987654321</p>\n";
        
        if ($orders->getTotalRecords() > 0) {
            echo "<p>üìã Danh s√°ch ƒë∆°n h√†ng:</p>\n";
            foreach ($orders->getOrders() as $order) {
                echo "<ul>\n";
                echo "<li>ID: " . $order->getId() . " - " . $order->getCustomerName() . " - " . number_format($order->getCalcTotalMoney()) . " VNƒê</li>\n";
                echo "</ul>\n";
            }
        }
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 4. L·∫•y ƒë∆°n h√†ng theo lo·∫°i
    echo "<h2>4. L·∫•y ƒë∆°n h√†ng theo lo·∫°i</h2>\n";
    try {
        // ƒê∆°n h√†ng giao h√†ng t·∫≠n nh√†
        $shippingOrders = $client->orders()->getShippingOrders();
        echo "<p>üöö ƒê∆°n h√†ng giao h√†ng t·∫≠n nh√†: " . $shippingOrders->getTotalRecords() . "</p>\n";
        
        // ƒê∆°n h√†ng mua t·∫°i qu·∫ßy
        $counterOrders = $client->orders()->getCounterOrders();
        echo "<p>üè™ ƒê∆°n h√†ng mua t·∫°i qu·∫ßy: " . $counterOrders->getTotalRecords() . "</p>\n";
        
        // ƒê∆°n h√†ng ƒë·∫∑t tr∆∞·ªõc
        $preOrders = $client->orders()->getPreOrders();
        echo "<p>üìÖ ƒê∆°n h√†ng ƒë·∫∑t tr∆∞·ªõc: " . $preOrders->getTotalRecords() . "</p>\n";
        
        // ƒê∆°n h√†ng tr·∫£ h√†ng
        $returnOrders = $client->orders()->getReturnOrders();
        echo "<p>‚Ü©Ô∏è ƒê∆°n h√†ng tr·∫£ h√†ng: " . $returnOrders->getTotalRecords() . "</p>\n";
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 5. T√¨m ki·∫øm theo kho·∫£ng th·ªùi gian
    echo "<h2>5. T√¨m ki·∫øm theo kho·∫£ng th·ªùi gian</h2>\n";
    try {
        $orders = $client->orders()->getByDateRange('2024-01-01', '2024-01-10');
        echo "<p>üìÖ ƒê∆°n h√†ng t·ª´ 01/01/2024 ƒë·∫øn 10/01/2024: " . $orders->getTotalRecords() . "</p>\n";
        
        if ($orders->getTotalRecords() > 0) {
            // L·ªçc theo tr·∫°ng th√°i
            $pendingOrders = $orders->filterByStatus('pending');
            echo "<p>‚è≥ ƒê∆°n h√†ng ch·ªù x·ª≠ l√Ω: " . $pendingOrders->count() . "</p>\n";
            
            // L·ªçc theo lo·∫°i
            $shippingOrders = $orders->filterByType(1);
            echo "<p>üöö ƒê∆°n h√†ng giao h√†ng: " . $shippingOrders->count() . "</p>\n";
            
            // L·ªçc theo kho·∫£ng gi√°
            $highValueOrders = $orders->filterByAmountRange(1000000, 5000000);
            echo "<p>üí∞ ƒê∆°n h√†ng gi√° tr·ªã cao (1M-5M): " . $highValueOrders->count() . "</p>\n";
        }
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 6. T√¨m ki·∫øm n√¢ng cao v·ªõi nhi·ªÅu ti√™u ch√≠
    echo "<h2>6. T√¨m ki·∫øm n√¢ng cao v·ªõi nhi·ªÅu ti√™u ch√≠</h2>\n";
    try {
        $searchParams = [
            'fromDate' => '2024-01-01',
            'toDate' => '2024-01-10',
            'statuses' => ['pending', 'processing'],
            'type' => 1, // Giao h√†ng t·∫≠n nh√†
            'dataOptions' => ['giftProducts', 'marketingUtm'],
            'page' => 1,
            'limit' => 50
        ];
        
        // Validate d·ªØ li·ªáu t√¨m ki·∫øm
        $isValid = $client->orders()->validateSearchRequest($searchParams);
        if ($isValid) {
            echo "<p>‚úÖ D·ªØ li·ªáu t√¨m ki·∫øm h·ª£p l·ªá</p>\n";
            
            $orders = $client->orders()->search($searchParams);
            echo "<p>üìã K·∫øt qu·∫£ t√¨m ki·∫øm: " . $orders->getTotalRecords() . " ƒë∆°n h√†ng</p>\n";
            
            if ($orders->getTotalRecords() > 0) {
                // L·∫•y th·ªëng k√™
                $statusStats = $orders->getStatusStatistics();
                echo "<p>üìä Th·ªëng k√™ theo tr·∫°ng th√°i:</p>\n";
                foreach ($statusStats as $status => $count) {
                    echo "<p>‚Ä¢ " . $status . ": " . $count . "</p>\n";
                }
                
                $typeStats = $orders->getTypeStatistics();
                echo "<p>üìä Th·ªëng k√™ theo lo·∫°i:</p>\n";
                foreach ($typeStats as $type => $count) {
                    echo "<p>‚Ä¢ " . $type . ": " . $count . "</p>\n";
                }
                
                $channelStats = $orders->getSaleChannelStatistics();
                echo "<p>üìä Th·ªëng k√™ theo k√™nh b√°n:</p>\n";
                foreach ($channelStats as $channel => $count) {
                    echo "<p>‚Ä¢ " . $channel . ": " . $count . "</p>\n";
                }
                
                // T√≠nh t·ªïng doanh thu v√† ph√≠ v·∫≠n chuy·ªÉn
                $totalRevenue = $orders->getTotalRevenue();
                $totalShippingFee = $orders->getTotalShippingFee();
                echo "<p>üí∞ T·ªïng doanh thu: " . number_format($totalRevenue) . " VNƒê</p>\n";
                echo "<p>üöö T·ªïng ph√≠ v·∫≠n chuy·ªÉn: " . number_format($totalShippingFee) . " VNƒê</p>\n";
            }
        } else {
            echo "<p>‚ùå D·ªØ li·ªáu t√¨m ki·∫øm kh√¥ng h·ª£p l·ªá</p>\n";
            $errors = $client->orders()->getSearchRequestErrors($searchParams);
            echo "<p>üîç Chi ti·∫øt l·ªói:</p>\n";
            foreach ($errors as $field => $fieldErrors) {
                foreach ($fieldErrors as $error) {
                    echo "<p>‚Ä¢ " . $field . ": " . $error . "</p>\n";
                }
            }
        }
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 7. Qu·∫£n l√Ω cache
    echo "<h2>7. Qu·∫£n l√Ω cache</h2>\n";
    try {
        // L·∫•y tr·∫°ng th√°i cache
        $cacheStatus = $client->orders()->getCacheStatus();
        echo "<p>üìä Tr·∫°ng th√°i cache:</p>\n";
        echo "<p>‚Ä¢ T·ªïng s·ªë keys: " . $cacheStatus['total_keys'] . "</p>\n";
        
        if (isset($cacheStatus['keys'])) {
            foreach ($cacheStatus['keys'] as $key => $info) {
                echo "<p>‚Ä¢ " . $key . " - TTL: " . $info['ttl'] . "s - H·∫øt h·∫°n: " . $info['expires_in'] . "</p>\n";
            }
        }
        
        // Ki·ªÉm tra cache c√≥ s·∫µn kh√¥ng
        $hasCache = $client->orders()->isCacheAvailable();
        echo "<p>üíæ Cache c√≥ s·∫µn: " . ($hasCache ? 'C√≥' : 'Kh√¥ng') . "</p>\n";
        
        // X√≥a cache (comment ƒë·ªÉ tr√°nh x√≥a cache trong v√≠ d·ª•)
        // $client->orders()->clearCache();
        // echo "<p>üóëÔ∏è ƒê√£ x√≥a cache</p>\n";
        
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    // 8. X·ª≠ l√Ω l·ªói v√† validation
    echo "<h2>8. X·ª≠ l√Ω l·ªói v√† validation</h2>\n";
    try {
        // Test validation v·ªõi d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        $invalidParams = [
            'fromDate' => '2024-01-01',
            'toDate' => '2024-01-25' // V∆∞·ª£t qu√° 10 ng√†y
        ];
        
        $isValid = $client->orders()->validateSearchRequest($invalidParams);
        if (!$isValid) {
            echo "<p>‚ùå Validation th·∫•t b·∫°i (nh∆∞ mong ƒë·ª£i)</p>\n";
            $errors = $client->orders()->getSearchRequestErrors($invalidParams);
            echo "<p>üîç Chi ti·∫øt l·ªói:</p>\n";
            foreach ($errors as $field => $fieldErrors) {
                foreach ($fieldErrors as $error) {
                    echo "<p>‚Ä¢ " . $field . ": " . $error . "</p>\n";
                }
            }
        }
        
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói: " . $e->getMessage() . "</p>\n";
    }

    echo "<h2>üéâ Ho√†n th√†nh!</h2>\n";
    echo "<p>B·∫°n ƒë√£ th·∫•y c√°ch s·ª≠ d·ª•ng Order Module ƒë·ªÉ:</p>\n";
    echo "<ul>\n";
    echo "<li>‚úÖ T√¨m ki·∫øm ƒë∆°n h√†ng theo nhi·ªÅu ti√™u ch√≠</li>\n";
    echo "<li>‚úÖ L·ªçc v√† ph√¢n t√≠ch d·ªØ li·ªáu ƒë∆°n h√†ng</li>\n";
    echo "<li>‚úÖ Qu·∫£n l√Ω cache ƒë·ªÉ tƒÉng hi·ªáu su·∫•t</li>\n";
    echo "<li>‚úÖ Validate d·ªØ li·ªáu ƒë·∫ßu v√†o</li>\n";
    echo "<li>‚úÖ X·ª≠ l√Ω l·ªói m·ªôt c√°ch an to√†n</li>\n";
    echo "</ul>\n";

} catch (Exception $e) {
    echo "<h2>‚ùå L·ªói kh·ªüi t·∫°o</h2>\n";
    echo "<p>Kh√¥ng th·ªÉ kh·ªüi t·∫°o client: " . $e->getMessage() . "</p>\n";
    echo "<p>Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh trong file auth.json</p>\n";
}
?>

<style>
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    margin: 20px;
    background-color: #f5f5f5;
}

h1 {
    color: #2c3e50;
    border-bottom: 3px solid #3498db;
    padding-bottom: 10px;
}

h2 {
    color: #34495e;
    border-left: 4px solid #3498db;
    padding-left: 15px;
    margin-top: 30px;
}

p {
    margin: 10px 0;
    padding: 5px 0;
}

ul {
    margin: 10px 0;
    padding-left: 20px;
}

li {
    margin: 5px 0;
}

.‚úÖ { color: #27ae60; }
.‚ùå { color: #e74c3c; }
.‚ÑπÔ∏è { color: #3498db; }
.üìã { color: #9b59b6; }
.üìä { color: #f39c12; }
.üí∞ { color: #f1c40f; }
.üöö { color: #e67e22; }
.üè™ { color: #95a5a6; }
.üìÖ { color: #1abc9c; }
.‚Ü©Ô∏è { color: #e91e63; }
.‚è≥ { color: #9c27b0; }
.üíæ { color: #607d8b; }
.üóëÔ∏è { color: #795548; }
.üîç { color: #ff9800; }
.üéâ { color: #4caf50; }
</style>
