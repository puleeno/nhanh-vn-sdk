<?php

namespace Examples;

use Puleeno\NhanhVn\Client\NhanhVnClient;
use Puleeno\NhanhVn\Config\ClientConfig;
use Puleeno\NhanhVn\Exceptions\ConfigurationException;

/**
 * OAuth Example Application
 *
 * Demo OAuth flow c·ªßa Nhanh.vn SDK v2.0
 */
class OAuthExample
{
    private string $configFile;
    private array $config;
    private ?NhanhVnClient $client = null;
    private string $tokenFile;

    public function __construct()
    {
        $this->configFile = __DIR__ . '/../auth.json';
        $this->tokenFile = __DIR__ . '/../tokens.json';
        $this->loadConfig();
    }

        /**
     * Load c·∫•u h√¨nh t·ª´ file auth.json
     */
    private function loadConfig(): void
    {
        if (!file_exists($this->configFile)) {
            throw new \RuntimeException("File c·∫•u h√¨nh {$this->configFile} kh√¥ng t·ªìn t·∫°i!");
        }

        $this->config = json_decode(file_get_contents($this->configFile), true);

        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new \RuntimeException("File c·∫•u h√¨nh JSON kh√¥ng h·ª£p l·ªá!");
        }

        // Validate required fields for OAuth initiation
        $required = ['appId', 'secretKey', 'redirectUrl'];
        foreach ($required as $field) {
            if (empty($this->config[$field])) {
                throw new \RuntimeException("Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {$field}");
            }
        }

        // businessId v√† environment c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ban ƒë·∫ßu
        if (empty($this->config['businessId'])) {
            $this->config['businessId'] = null;
        }

        if (empty($this->config['environment'])) {
            $this->config['environment'] = 'sandbox';
        }
    }

        /**
     * Hi·ªÉn th·ªã th√¥ng tin server
     */
    public function showServerInfo(): void
    {
        echo '<div class="container">';
        echo '<h1>üöÄ Nhanh.vn SDK v2.0 - OAuth Example</h1>';
        echo '<hr>';

        echo '<div class="section">';
        echo '<h2>üìã Th√¥ng tin Server</h2>';
        echo '<ul>';
        echo '<li><strong>URL:</strong> http://localhost:8000</li>';
        echo '<li><strong>Port:</strong> 8000</li>';
        echo '<li><strong>PHP Version:</strong> ' . PHP_VERSION . '</li>';
        echo '<li><strong>Server Time:</strong> ' . date('Y-m-d H:i:s') . '</li>';
        echo '<li><strong>Config File:</strong> ' . basename($this->configFile) . '</li>';
        echo '</ul>';
        echo '</div>';

        echo '<div class="section">';
        echo '<h2>‚öôÔ∏è C·∫•u h√¨nh OAuth</h2>';
        echo '<ul>';
        echo '<li><strong>App ID:</strong> ' . htmlspecialchars($this->config['appId']) . '</li>';
        echo '<li><strong>Business ID:</strong> ' . htmlspecialchars($this->config['businessId'] ?? 'Ch∆∞a c√≥ (s·∫Ω c√≥ sau khi x√°c th·ª±c)') . '</li>';
        echo '<li><strong>Environment:</strong> ' . htmlspecialchars($this->config['environment']) . '</li>';
        echo '<li><strong>Redirect URL:</strong> ' . htmlspecialchars($this->config['redirectUrl']) . '</li>';
        echo '</ul>';
        echo '</div>';
    }

        /**
     * Hi·ªÉn th·ªã link OAuth ƒë·ªÉ user click
     */
    public function showOAuthLink(): void
    {
        $oauthUrl = $this->getOAuthUrl();

        echo '<div class="section">';
        echo '<h2>üîê OAuth Authorization</h2>';
        echo '<p>Click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ authorize ·ª©ng d·ª•ng:</p>';

        echo '<div class="oauth-link">';
        echo '<a href="' . htmlspecialchars($oauthUrl) . '" class="btn btn-primary" target="_blank">üì± Authorize v·ªõi Nhanh.vn</a>';
        echo '</div>';

        echo '<div class="oauth-info">';
        echo '<p><strong>OAuth URL:</strong></p>';
        echo '<input type="text" value="' . htmlspecialchars($oauthUrl) . '" readonly class="url-input" onclick="this.select()">';
        echo '<p><small>Ho·∫∑c copy link n√†y v√†o browser</small></p>';
        echo '</div>';

        echo '<p><strong>Sau khi authorize, b·∫°n s·∫Ω ƒë∆∞·ª£c redirect v·ªÅ:</strong> ' . htmlspecialchars($this->config['redirectUrl']) . '</p>';
        echo '</div>';
    }

    /**
     * T·∫°o OAuth URL
     */
    private function getOAuthUrl(): string
    {
        try {
            $client = $this->initializeClient();
            if ($client) {
                // S·ª≠ d·ª•ng SDK method
                return $client->getOAuthUrl($this->config['redirectUrl']);
            }
        } catch (\Exception $e) {
            // Log error nh∆∞ng kh√¥ng throw
            error_log("SDK Error in getOAuthUrl: " . $e->getMessage());
        }

        // Fallback n·∫øu SDK ch∆∞a s·∫µn s√†ng
        $baseUrl = 'https://nhanh.vn/oauth';
        $params = [
            'version' => '2.0',
            'appId' => $this->config['appId'],
            'returnLink' => $this->config['redirectUrl']
        ];

        // Th√™m businessId n·∫øu c√≥
        if (isset($this->config['businessId'])) {
            $params['businessId'] = $this->config['businessId'];
        }

        return $baseUrl . '?' . http_build_query($params);
    }

        /**
     * Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
     */
    public function showCurrentStatus(): void
    {
        echo '<div class="section">';
        echo '<h2>üìä Tr·∫°ng th√°i hi·ªán t·∫°i</h2>';

        if (file_exists($this->tokenFile)) {
            $tokens = json_decode(file_get_contents($this->tokenFile), true);
            if (isset($tokens['access_token'])) {
                echo '<div class="status success">';
                echo '<h3>‚úÖ ƒê√£ c√≥ access token</h3>';
                echo '<ul>';
                echo '<li><strong>Token:</strong> ' . htmlspecialchars(substr($tokens['access_token'], 0, 20)) . '...</li>';
                echo '<li><strong>Expires:</strong> ' . htmlspecialchars($tokens['expires_at'] ?? 'N/A') . '</li>';
                echo '</ul>';
                echo '</div>';
            } else {
                echo '<div class="status error">';
                echo '<h3>‚ùå Ch∆∞a c√≥ access token</h3>';
                echo '</div>';
            }
        } else {
            echo '<div class="status error">';
            echo '<h3>‚ùå Ch∆∞a c√≥ access token</h3>';
            echo '</div>';
        }

        echo '<div class="section">';
        echo '<h3>üí° H∆∞·ªõng d·∫´n</h3>';
        echo '<ol>';
        echo '<li>Click v√†o link OAuth ·ªü tr√™n</li>';
        echo '<li>ƒêƒÉng nh·∫≠p v√† authorize ·ª©ng d·ª•ng</li>';
        echo '<li>B·∫°n s·∫Ω ƒë∆∞·ª£c redirect v·ªÅ callback URL</li>';
        echo '<li>Access token s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông</li>';
        echo '</ol>';
        echo '</div>';

        echo '<div class="section">';
        echo '<p><strong>üîÑ ƒê·ªÉ test l·∫°i:</strong> <a href="http://localhost:8000/callback.php">http://localhost:8000/callback.php</a></p>';
        echo '</div>';
        echo '</div>';
    }

        /**
     * X·ª≠ l√Ω callback t·ª´ Nhanh.vn OAuth
     */
    public function handleCallback(): void
    {
        echo '<div class="container">';
        echo '<h1>üîÑ X·ª≠ l√Ω OAuth Callback</h1>';
        echo '<hr>';

        // L·∫•y access code t·ª´ query parameters (Nhanh.vn s·ª≠ d·ª•ng accessCode)
        $accessCode = $_GET['accessCode'] ?? $_GET['access_code'] ?? null;
        $error = $_GET['error'] ?? null;

        if ($error) {
            echo '<div class="status error">';
            echo '<h2>‚ùå L·ªói OAuth</h2>';
            echo '<p><strong>L·ªói:</strong> ' . htmlspecialchars($error) . '</p>';
            echo '<p><strong>M√¥ t·∫£:</strong> ' . htmlspecialchars($_GET['error_description'] ?? 'Kh√¥ng c√≥ m√¥ t·∫£') . '</p>';
            echo '</div>';
            echo '</div>';
            return;
        }

        if (!$accessCode) {
            echo '<div class="status error">';
            echo '<h2>‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c accessCode t·ª´ callback</h2>';
            echo '<p><strong>L∆∞u √Ω:</strong> Nhanh.vn s·ª≠ d·ª•ng parameter <code>accessCode</code> (kh√¥ng ph·∫£i <code>access_code</code>)</p>';
            echo '<p><strong>Query parameters nh·∫≠n ƒë∆∞·ª£c:</strong></p>';
            echo '<pre>' . htmlspecialchars(json_encode($_GET, JSON_PRETTY_PRINT)) . '</pre>';
            echo '<p><strong>Expected parameters:</strong></p>';
            echo '<ul>';
            echo '<li><code>accessCode</code> - Access code t·ª´ Nhanh.vn</li>';
            echo '<li><code>error</code> - M√£ l·ªói (n·∫øu c√≥)</li>';
            echo '<li><code>error_description</code> - M√¥ t·∫£ l·ªói (n·∫øu c√≥)</li>';
            echo '</ul>';
            echo '</div>';
            echo '</div>';
            return;
        }

        echo '<div class="status success">';
        echo '<h2>‚úÖ Nh·∫≠n ƒë∆∞·ª£c accessCode t·ª´ Nhanh.vn</h2>';
        echo '<div class="oauth-info">';
        echo '<p><strong>Access Code:</strong></p>';
        echo '<input type="text" value="' . htmlspecialchars($accessCode) . '" readonly class="url-input" onclick="this.select()">';
        echo '<p><small>Access code n√†y s·∫Ω ƒë∆∞·ª£c ƒë·ªïi l·∫•y access token</small></p>';
        echo '</div>';
        echo '</div>';

        echo '<div class="section">';
        echo '<h2>üîÑ ƒêang ƒë·ªïi access_code l·∫•y access_token...</h2>';

                try {
            // ƒê·ªïi access code l·∫•y access token s·ª≠ d·ª•ng SDK
            $results = $this->exchangeAccessCode($accessCode);

            // L∆∞u token v√†o file
            $this->saveTokens($results['accessToken'], $results['businessId']);

            echo '<div class="status success">';
            echo '<h3>üéâ Th√†nh c√¥ng! ƒê√£ l∆∞u access token</h3>';
            echo '<ul>';
            echo '<li><strong>Token:</strong> ' . htmlspecialchars(substr($results['accessToken'], 0, 20)) . '...</li>';
            echo '<li><strong>File:</strong> ' . htmlspecialchars(basename($this->tokenFile)) . '</li>';
            echo '</ul>';
            echo '</div>';

            echo '<div class="section">';
            echo '<h3>üì± B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng SDK ƒë·ªÉ g·ªçi API:</h3>';
            echo '<ul>';
            echo '<li><a href="http://localhost:8000">Truy c·∫≠p trang ch√≠nh</a></li>';
            echo '<li>Ho·∫∑c s·ª≠ d·ª•ng trong code PHP</li>';
            echo '</ul>';
            echo '</div>';

        } catch (\Exception $e) {
            echo '<div class="status error">';
            echo '<h3>‚ùå L·ªói khi ƒë·ªïi access code</h3>';
            echo '<p>' . htmlspecialchars($e->getMessage()) . '</p>';
            echo '</div>';
        }

        echo '</div>';
        echo '</div>';
    }

            /**
     * ƒê·ªïi access code l·∫•y access token s·ª≠ d·ª•ng SDK
     */
    private function exchangeAccessCode(string $accessCode): array
    {
        // S·ª≠ d·ª•ng SDK ƒë·ªÉ ƒë·ªïi access code l·∫•y access token
        try {
            // T·∫°o config t·∫°m th·ªùi ƒë·ªÉ kh·ªüi t·∫°o client
            $tempConfig = new \Puleeno\NhanhVn\Config\ClientConfig([
                'appId' => $this->config['appId'],
                'secretKey' => $this->config['secretKey'],
                'apiVersion' => '2.0',
                'baseUrl' => 'https://pos.open.nhanh.vn'
            ]);

            // Kh·ªüi t·∫°o client t·∫°m th·ªùi
            $tempClient = \Puleeno\NhanhVn\Client\NhanhVnClient::getInstance($tempConfig);

            // S·ª≠ d·ª•ng OAuth service c·ªßa SDK
            $result = $tempClient->oauth()->exchangeAccessCode($accessCode);

            // Debug: Log response ƒë·ªÉ xem c·∫•u tr√∫c
            error_log("Nhanh.vn API Response via SDK: " . json_encode($result));

            // Hi·ªÉn th·ªã debug info tr·ª±c ti·∫øp tr√™n web
            echo '<div class="section">';
            echo '<h3>üîç Debug Info (via SDK):</h3>';
            echo '<pre>' . htmlspecialchars(json_encode($result, JSON_PRETTY_PRINT)) . '</pre>';
            echo '</div>';

            return $result;

        } catch (\Exception $e) {
            throw new \RuntimeException("SDK Error: " . $e->getMessage());
        }
    }

        /**
     * L∆∞u access token v√†o file
     */
    private function saveTokens(string $accessToken, $businessId = null): void
    {
        $tokens = [
            'access_token' => $accessToken,
            'created_at' => date('Y-m-d H:i:s'),
            'expires_at' => date('Y-m-d H:i:s', strtotime('+30 days')), // Gi·∫£ s·ª≠ token c√≥ h·∫°n 30 ng√†y
            'app_id' => $this->config['appId'],
            'business_id' => $businessId // S·ª≠ d·ª•ng businessId t·ª´ parameter
        ];

        // C·∫≠p nh·∫≠t c·∫•u h√¨nh n·∫øu c√≥ businessId t·ª´ OAuth response
        if (empty($this->config['businessId']) && $businessId) {
            $this->config['businessId'] = $businessId;
        }

        file_put_contents($this->tokenFile, json_encode($tokens, JSON_PRETTY_PRINT));
    }

    /**
     * L·∫•y c·∫•u h√¨nh
     */
    public function getConfig(): array
    {
        // C·∫≠p nh·∫≠t businessId t·ª´ tokens.json n·∫øu c√≥
        if (file_exists($this->tokenFile)) {
            $tokens = json_decode(file_get_contents($this->tokenFile), true);
            if (isset($tokens['business_id']) && $tokens['business_id']) {
                $this->config['businessId'] = $tokens['business_id'];
            }
        }

        return $this->config;
    }

    /**
     * L·∫•y access token ƒë√£ l∆∞u
     */
    public function getStoredAccessToken(): ?string
    {
        if (file_exists($this->tokenFile)) {
            $tokens = json_decode(file_get_contents($this->tokenFile), true);
            return $tokens['access_token'] ?? null;
        }
        return null;
    }

    /**
     * Kh·ªüi t·∫°o SDK client v·ªõi access token
     */
    public function initializeClient(): ?NhanhVnClient
    {
        $accessToken = $this->getStoredAccessToken();
        if (!$accessToken) {
            return null;
        }

        try {
            $config = new ClientConfig([
                'appId' => $this->config['appId'],
                'businessId' => $this->config['businessId'],
                'accessToken' => $accessToken
            ]);

            $this->client = NhanhVnClient::getInstance($config);
            return $this->client;

        } catch (ConfigurationException $e) {
            echo "‚ùå L·ªói c·∫•u h√¨nh SDK: " . $e->getMessage() . "\n";
            return null;
        }
    }
}
